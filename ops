{"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"ops":[{"type":3,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1485957113,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3NjY2MTgwNw==","github-url":"https://github.com/rurban/smhasher/issues/24#issuecomment-276661807"},"nonce":"kbIvmGgACddZ+Vr1mxk6a3trff0=","message":"The abbrevated versions of MD5 and SHA1 are indeed doing horribly, means their lower 32bits are not worth using. This is normal and also known from PRF (pseudo random functions): The higher bits are always best, lower bits are pretty bad.\nIn reality I could have used the upper, better bits for md5 and sha1, but that's not what people are using. They are avoiding the right shift and don't know about basic hash function qualities. So this is good here as a warning. And with hash tables, people are even using the lowest bits, far less than 32.\n\nSee the doc/* directory for the full results: \n\ne.g. `doc/md5_32a` \n```\n[[[ Keyset 'Seed' Tests ]]]\n\nKeyset 'Seed' - 1000000 keys\nTesting collisions   - Expected   116.42, actual 999999.00 (8589.93x) !!!!!\nTesting distribution - Worst bias is the  17-bit window at bit   0 - 99.999% !!!!!\n```\n\nThis sha1 line looks indeed the same as the md5 line. will crosscheck, thanks. But I generate those docs and the result tables automatically.\n\nI haven't yet updated the speed tests, as I was out of the country. Need my stable machine for that.\nWill do. I'm using a Haswell i7. Those SSE functions are **very** HW dependent.\n\n----\nBTW: what I said above is mostly wrong and leo is right.\n1. MD5 and SHA1 already uses the better highest 32bits.\n2. The seed error came from MD5 and SHA1 ignoring the seed. Leo added it.","files":null}]}