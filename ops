{"author":{"id":"376b3a021f25ce0cd88cb689d57dd4027d984aa850f244325cbde8ee654ddf02"},"ops":[{"type":3,"author":{"id":"376b3a021f25ce0cd88cb689d57dd4027d984aa850f244325cbde8ee654ddf02"},"timestamp":1618160660,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgxNzMzOTI5Mw==","github-url":"https://github.com/rurban/smhasher/issues/190#issuecomment-817339293"},"nonce":"wyXiIRQN4jYPWt54umUBSktVc7k=","message":"yes, due to limit to 16bit (half 32bit) multiplication and 32bit linear op, it has to multiply twice per 32bit and do more shift/add.\n\nwyhash and xxh3 take the advantage of the more powerful instructions, while on some low profile hardwares, the full/half 64bit `MUL` would be expensive.","files":null},{"type":3,"author":{"id":"376b3a021f25ce0cd88cb689d57dd4027d984aa850f244325cbde8ee654ddf02"},"timestamp":1618162276,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgxNzM0Mjk4Mw==","github-url":"https://github.com/rurban/smhasher/issues/190#issuecomment-817342983"},"nonce":"A7Sa3vL4ASuHN4kOvO7rKR/sRvs=","message":"\u003e Some other good ideas also in blog posts of [mx3](https://github.com/jonmaiga/mx3/) hash ðŸ˜‰.\n\n@dumblob i've read most of your `mixer` posts, and this hash indeed borrow some idea when constructing and measuring the core mixer.\n\nWhen mix the bits with reversible integer operations, `mul`-style op are still more efficiency than `shift-add` and `shift-xor`. As a pure 32bit hash, not a low part of a 64bit/128bit hash, the `mul` should also be lean, like xxhash32 and wyhash32.","files":null},{"type":3,"author":{"id":"376b3a021f25ce0cd88cb689d57dd4027d984aa850f244325cbde8ee654ddf02"},"timestamp":1618162544,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgxNzM0MzU5MA==","github-url":"https://github.com/rurban/smhasher/issues/190#issuecomment-817343590"},"nonce":"JPTER5l8smbe8VMliaR2gGyfs4A=","message":"@rurban why the `#include \"nmhash.h\"` is enclosed in `extern \"C\" {...}` which should be already done in the `nmhash.h`","files":null}]}