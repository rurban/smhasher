{"author":{"id":"6eee5efae6ac4c22551887b8f66b9bbb345d45511a0675f837fab3c1b02acdca"},"ops":[{"type":3,"author":{"id":"6eee5efae6ac4c22551887b8f66b9bbb345d45511a0675f837fab3c1b02acdca"},"timestamp":1532628182,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwODE4Mzg1MA==","github-url":"https://github.com/rurban/smhasher/issues/46#issuecomment-408183850"},"nonce":"QIq7/DQ9kxEYiLZd6pVusgIon0M=","message":"Cheers for the response mate. You wouldn't happen to be able to point me to the issue/pull request/commits for that? If not, I'll go trawling myself ;)\n\nYou see, there's still a bit of a mystery - if all of the hash functions now measured at some y = x * old_cycles_per_hash, where x is relatively constant, it'd all be clear. However, my cmetrohash64 implementation optimized for short keys (taken from my old fork, since the in-tree implementation got clobbered) now measures as almost the same on average as the unoptimized cmetrohash it's built on *and* exhibits bizarre spikes in cycles/hash at certain key lengths, which it didn't do before.\n\nI need to understand why that is so. Either my optimization is and was garbage, but just so happened to somehow take advantage of the previous (presumably inferior) measurement method, or one (or more) of the measurement algo changes, compiler flag changes and compiler upgrade have done this.","files":null}]}