{"author":{"id":"59b672f9bb8c1ab1540eec7da16dacd334abf413797c1658c40f7e53b2c47801"},"ops":[{"type":3,"author":{"id":"59b672f9bb8c1ab1540eec7da16dacd334abf413797c1658c40f7e53b2c47801"},"timestamp":1586359290,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMTAyMTc4NA==","github-url":"https://github.com/rurban/smhasher/issues/120#issuecomment-611021784"},"nonce":"6AMDM+TMrOzOSUvL1ovyaReYOnc=","message":"The article you linked to compares two PRNGs:\n\n- A linear conguential PRNG with a small multiplier and a modulus of 2^32.\n- A 32-bit xorshift PRNG.\n\nBoth kinds of PRNGs are linear, so they tend to [produce correlated sequences of numbers](https://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/) across nearby seeds.  Nonlinear PRNGs as well as hash functions are less likely to do so.  Generally, two PRNGs (e.g., a PRNG initialized with one seed and the same PRNG initialized with a nearby seed) can be tested for correlation by [interleaving their outputs](http://pcg.di.unimi.it/pcg.php#flaws).  Something similar can be done for hash functions.  See also my [notes on testing PRNGs](https://github.com/peteroupc/peteroupc.github.io/blob/master/randomtest.md).\n\nHowever, for the use in hash tables and other data lookup applications, hash functions are designed to map data into a sequence of bits in a way that avoids collisions (\"[better than random](https://github.com/nim-lang/Nim/issues/11764#issuecomment-609462814)\").\n\n(Note: Despite what the article states, LCGs are not always \"bad news\"; at larger sizes and when their lower bits are chopped off, LCGs can have [exceptional randomness quality](https://www.pcg-random.org/posts/does-it-beat-the-minimal-standard.html).  Meanwhile, Xorshift generators by themselves [fail linear complexity tests](http://vigna.di.unimi.it/ftp/papers/xorshift.pdf), but this is not much of an issue for casual games, which is the focus of the article.)","files":null},{"type":6,"author":{"id":"59b672f9bb8c1ab1540eec7da16dacd334abf413797c1658c40f7e53b2c47801"},"timestamp":1586359306,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzYzODU5MTc4"},"nonce":"ADwtLmzl7YRQJ39ImotFbzSS2xw=","target":"e38f86fc74cb597790e13b88e754e4c2098880f02e3d87eaa0c4fb26490b75a3","message":"The article you linked to compares two PRNGs:\n\n- A linear conguential generator (LCG) with a small multiplier and a modulus of 2^32.\n- A 32-bit xorshift PRNG.\n\nBoth kinds of PRNGs are linear, so they tend to [produce correlated sequences of numbers](https://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/) across nearby seeds.  Nonlinear PRNGs as well as hash functions are less likely to do so.  Generally, two PRNGs (e.g., a PRNG initialized with one seed and the same PRNG initialized with a nearby seed) can be tested for correlation by [interleaving their outputs](http://pcg.di.unimi.it/pcg.php#flaws).  Something similar can be done for hash functions.  See also my [notes on testing PRNGs](https://github.com/peteroupc/peteroupc.github.io/blob/master/randomtest.md).\n\nHowever, for the use in hash tables and other data lookup applications, hash functions are designed to map data into a sequence of bits in a way that avoids collisions (\"[better than random](https://github.com/nim-lang/Nim/issues/11764#issuecomment-609462814)\").\n\n(Note: Despite what the article states, LCGs are not always \"bad news\"; at larger sizes and when their lower bits are chopped off, LCGs can have [exceptional randomness quality](https://www.pcg-random.org/posts/does-it-beat-the-minimal-standard.html).  Meanwhile, Xorshift generators by themselves [fail linear complexity tests](http://vigna.di.unimi.it/ftp/papers/xorshift.pdf), but this is not much of an issue for casual games, which is the focus of the article.)","files":null},{"type":6,"author":{"id":"59b672f9bb8c1ab1540eec7da16dacd334abf413797c1658c40f7e53b2c47801"},"timestamp":1586374585,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzYzOTIyODM4"},"nonce":"n0ud4WqVSCfchJ7cROPBN6m9Rhw=","target":"e38f86fc74cb597790e13b88e754e4c2098880f02e3d87eaa0c4fb26490b75a3","message":"The article you linked to compares two PRNGs:\n\n- A linear conguential generator (LCG) with a small multiplier and a modulus of 2^32.\n- A 32-bit xorshift PRNG.\n\nBoth kinds of PRNGs are linear, so they tend to [produce correlated sequences of numbers](https://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/) across nearby seeds.  Nonlinear PRNGs as well as nonlinear hash functions are less likely to do so.  Generally, two PRNGs (e.g., a PRNG initialized with one seed and the same PRNG initialized with a nearby seed) can be tested for correlation by [interleaving their outputs](http://pcg.di.unimi.it/pcg.php#flaws).  Something similar can be done for hash functions.  See also my [notes on testing PRNGs](https://github.com/peteroupc/peteroupc.github.io/blob/master/randomtest.md).\n\nHowever, for the use in hash tables and other data lookup applications, hash functions are designed to map data into a sequence of bits in a way that avoids collisions (\"[better than random](https://github.com/nim-lang/Nim/issues/11764#issuecomment-609462814)\").\n\n(Note: Despite what the article states, LCGs are not always \"bad news\"; at larger sizes and when their lower bits are chopped off, LCGs can have [exceptional randomness quality](https://www.pcg-random.org/posts/does-it-beat-the-minimal-standard.html).  Meanwhile, Xorshift generators by themselves [fail linear complexity tests](http://vigna.di.unimi.it/ftp/papers/xorshift.pdf), but this is not much of an issue for casual games, which is the focus of the article.)","files":null}]}