{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":3,"timestamp":1640843035,"metadata":{"github-id":"IC_kwDOARWYbc47xsJC","github-url":"https://github.com/rurban/smhasher/issues/221#issuecomment-1002881602"},"nonce":"39uTAuHYp9VE9GVkOFgUduLxeao=","message":"Yes, this is a correct approach to designing a hash function. This is what I've basically did with my hashes in the course of development. However, it's hard to evaluate mixer's PRNG period if it's designed for 64-bit or larger state from the ground up, 2^40 period evaluation is not a perfect check. And this is partially confirmed by xxHash's massive collision tester - wyhash fails it.\n\nI've evaluated my hashes on at least 2 sizes - 16-bit and 32-bit, a mixer should provide 32KB and 2GB PRNG periods for these, meaning it uses the whole combinatorial capacity of the state variables. For example, it's easy to downscale `komihash` to 32-bit variables.","files":null},{"type":3,"timestamp":1640882358,"metadata":{"github-id":"IC_kwDOARWYbc47yh6j","github-url":"https://github.com/rurban/smhasher/issues/221#issuecomment-1003101859"},"nonce":"mo+f+1/+oEr/MDPu4c+Zf4TXm18=","message":"A more robust approach is to retain mixer's state and \"mix-in\" data after every PRNG output. This would also test collision-resistance, or dependence of output on mixer's prior state.","files":null},{"type":3,"timestamp":1640885577,"metadata":{"github-id":"IC_kwDOARWYbc47ymcs","github-url":"https://github.com/rurban/smhasher/issues/221#issuecomment-1003120428"},"nonce":"kCUchPFkkfbRdrip5gLZ0rQyzG0=","message":"So, there are two ways to test mixers: continuous and discrete. Discrete one, when a mixer starts from some fixed state on every PRNG output, however, requires differing number of mixing rounds. For example, `komihash` requires 2 mixing rounds while `prvhash` requires 3. Depends on how a mixer was designed. But for sure, a good mixer should work in both testing ways.","files":null}]}