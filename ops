{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597971767,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3Nzk4MDYyMQ==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-677980621"},"nonce":"DpjyTigkCMLwhcMzvHkRi0PUl44=","message":"```\ndouble Counts[ 256 ] = { 0.0 };\n\n...for all hashes:\nuint64_t Hash = \u003cvalue\u003e;\nint j;\n\nfor( j = 0; j \u003c 8; j++ )\n{\nCounts[ (uint8_t) Hash ]++;\nHash \u003e\u003e= 8;\n}\n... then, finally:\ndouble Avg = 0.0;\n\nfor( i = 0; i \u003c 256; i++ )\n{\n\tAvg += Counts[ i ];\n}\n\nAvg /= 256.0;\ndouble devsq = 0.0;\n\nfor( i = 0; i \u003c 256; i++ )\n{\n\tconst double d = Counts[ i ] / Avg - 1.0;\n\tdevsq += d * d;\n}\n\ndev *= Avg / 256.0;\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597971823,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0Njc1Nzk2"},"nonce":"Froxy3H7chUeuDKZmAFWQ025jEY=","target":"25a812c3026475163bd4916651869e29949d88c26147fbb7bcd68baa44f90ba0","message":"```\ndouble Counts[ 256 ] = { 0.0 };\n\n...for all hashes:\nuint64_t Hash = \u003cvalue\u003e;\nint j;\n\nfor( j = 0; j \u003c 8; j++ )\n{\n\tCounts[ (uint8_t) Hash ]++;\n\tHash \u003e\u003e= 8;\n}\n... then, finally:\ndouble Avg = 0.0;\n\nfor( i = 0; i \u003c 256; i++ )\n{\n\tAvg += Counts[ i ];\n}\n\nAvg /= 256.0;\ndouble devsq = 0.0;\n\nfor( i = 0; i \u003c 256; i++ )\n{\n\tconst double d = Counts[ i ] / Avg - 1.0;\n\tdevsq += d * d;\n}\n\ndevsq *= Avg / 256.0;\n```","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597972167,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3Nzk4MjM5Mw==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-677982393"},"nonce":"SYtU6ZL0k1fVnoyD8MI5JfWehVI=","message":"Note that both `CryptGenRandom` on Windows and /dev/random on Unix have this statistic close to 1.0, rarely in the range 0.8-1.2. LCG random generators... not so much.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597972177,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0Njc2NjUy"},"nonce":"N5RKENcC28zYlXLnugLVmRoRak8=","target":"074033fc4c01a793eece7f26de41c5372d5e003e23d919d712c23f01f6a5a673","message":"Note that both `CryptGenRandom` on Windows and `/dev/random` on Unix have this statistic close to 1.0, rarely in the range 0.8-1.2. LCG random generators... not so much.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597972904,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3Nzk4NTg3NQ==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-677985875"},"nonce":"SiPXrhJFDzAkRdQtVDHxvK7Ug/Y=","message":"Here's a complete program to evaluate system RNG.\n```\n//$ lib \"win*|AdvAPI32\"\n\n#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cmath.h\u003e\n\n#if defined( _WIN32 ) || defined( _WIN64 )\n\t#include \u003cwindows.h\u003e\n\t#include \u003cwincrypt.h\u003e\n#else // defined( _WIN32 ) || defined( _WIN64 )\n\t#define _UNIX 1\n#endif // defined( _WIN32 ) || defined( _WIN64 )\n\n#if defined( _UNIX )\n\tFILE* f; ///\u003c /dev/random file.\n#else // defined( _UNIX )\n\tHCRYPTPROV prov; ///\u003c Crypt provider (for Windows).\n#endif // defined( _UNIX )\n\nint main()\n{\n\t#if defined( _UNIX )\n\n\t\tf = fopen( \"/dev/random\", \"rb\" );\n\n\t\tif( f == NULL )\n\t\t{\n\t\t\treturn( 1 );\n\t\t}\n\n\t#else // defined( _UNIX )\n\n\t\tif( !CryptAcquireContext( \u0026prov, NULL, NULL, PROV_RSA_FULL,\n\t\t\tCRYPT_VERIFYCONTEXT ))\n\t\t{\n\t\t\treturn( 1 );\n\t\t}\n\n\t#endif // defined( _UNIX )\n\n\tint l;\n\n\tfor( l = 0; l \u003c 100; l++ )\n\t{\n\t\tdouble Counts[ 256 ] = { 0.0 };\n\t\tuint64_t i;\n\n\t\tfor( i = 0; i \u003c ( 1LL \u003c\u003c 24LL ); i++ )\n\t\t{\n\t\t\tuint8_t val = 0;\n\n\t\t\t#if defined( _UNIX )\n\n\t\t\t\tfread( \u0026val, 1, 1, f );\n\n\t\t\t#else // defined( _UNIX )\n\n\t\t\t\tCryptGenRandom( prov, 1, \u0026val );\n\n\t\t\t#endif // defined( _UNIX )\n\n\t\t\tCounts[ val ]++;\n\t\t}\n\n\t\tdouble Avg = 0.0;\n\n\t\tfor( i = 0; i \u003c 256; i++ )\n\t\t{\n\t\t\tAvg += Counts[ i ];\n\t\t}\n\n\t\tAvg /= 256.0;\n\t\tdouble dev = 0.0;\n\n\t\tfor( i = 0; i \u003c 256; i++ )\n\t\t{\n\t\t\tCounts[ i ] /= Avg;\n\t\t\tdouble d = Counts[ i ] - 1.0;\n\t\t\tdev += d * d;\n\t\t}\n\n\t\tdev *= Avg / 256.0;\n\n\t\tprintf( \"iter %i dev1 %f\\n\", l, fabs( 1.0 - dev ));\n\t}\n\n\t#if defined( _UNIX )\n\n\t\tfclose( f );\n\n\t#else // defined( _UNIX )\n\n\t\tCryptReleaseContext( prov, 0 );\n\n\t#endif // defined( _UNIX )\n}\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597972967,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0Njc4Njgz"},"nonce":"50SC798oHg75cG+aZLNylFmNbic=","target":"49fc414b8655cb97ae7ac43e92a7b2759d8f4eee4ba66b473feff5ad0410ee8d","message":"Here's a complete program to evaluate system RNG.\n```\n//$ lib \"win*|AdvAPI32\"\n\n#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cmath.h\u003e\n\n#if defined( _WIN32 ) || defined( _WIN64 )\n\t#include \u003cwindows.h\u003e\n\t#include \u003cwincrypt.h\u003e\n#else // defined( _WIN32 ) || defined( _WIN64 )\n\t#define _UNIX 1\n#endif // defined( _WIN32 ) || defined( _WIN64 )\n\n#if defined( _UNIX )\n\tFILE* f; ///\u003c /dev/random file.\n#else // defined( _UNIX )\n\tHCRYPTPROV prov; ///\u003c Crypt provider (for Windows).\n#endif // defined( _UNIX )\n\nint main()\n{\n\t#if defined( _UNIX )\n\n\t\tf = fopen( \"/dev/random\", \"rb\" );\n\n\t\tif( f == NULL )\n\t\t{\n\t\t\treturn( 1 );\n\t\t}\n\n\t#else // defined( _UNIX )\n\n\t\tif( !CryptAcquireContext( \u0026prov, NULL, NULL, PROV_RSA_FULL,\n\t\t\tCRYPT_VERIFYCONTEXT ))\n\t\t{\n\t\t\treturn( 1 );\n\t\t}\n\n\t#endif // defined( _UNIX )\n\n\tint l;\n\n\tfor( l = 0; l \u003c 100; l++ )\n\t{\n\t\tdouble Counts[ 256 ] = { 0.0 };\n\t\tuint64_t i;\n\n\t\tfor( i = 0; i \u003c ( 1LL \u003c\u003c 24LL ); i++ )\n\t\t{\n\t\t\tuint8_t val = 0;\n\n\t\t\t#if defined( _UNIX )\n\n\t\t\t\tfread( \u0026val, 1, 1, f );\n\n\t\t\t#else // defined( _UNIX )\n\n\t\t\t\tCryptGenRandom( prov, 1, \u0026val );\n\n\t\t\t#endif // defined( _UNIX )\n\n\t\t\tCounts[ val ]++;\n\t\t}\n\n\t\tdouble Avg = 0.0;\n\n\t\tfor( i = 0; i \u003c 256; i++ )\n\t\t{\n\t\t\tAvg += Counts[ i ];\n\t\t}\n\n\t\tAvg /= 256.0;\n\t\tdouble devsq = 0.0;\n\n\t\tfor( i = 0; i \u003c 256; i++ )\n\t\t{\n\t\t\tdouble d = Counts[ i ] / Avg - 1.0;\n\t\t\tdevsq += d * d;\n\t\t}\n\n\t\tdevsq *= Avg / 256.0;\n\n\t\tprintf( \"iter %i dev1 %f\\n\", l, fabs( 1.0 - devsq ));\n\t}\n\n\t#if defined( _UNIX )\n\n\t\tfclose( f );\n\n\t#else // defined( _UNIX )\n\n\t\tCryptReleaseContext( prov, 0 );\n\n\t#endif // defined( _UNIX )\n}\n```","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597983256,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODAyNzkzNw==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-678027937"},"nonce":"ityJpIZhZRg3aScxM5kUhYwp2z0=","message":"Here's also a cool experimental program to find adequate LCG generators. But LCG, of course, fails normalcy test, can't reach 0.8 - 0.12 value range.\n\n[findlcg.txt](https://github.com/rurban/smhasher/files/5106756/findlcg.txt)","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597984686,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0NzA5NjAz"},"nonce":"5Y1RSbRHw9FGDF4ehjxVhjiT45w=","target":"623886d06c5cc664d95af3eadd001d357f3eb031f69956ad6b9f78541f878665","message":"Here's also a cool experimental program to find adequate LCG generators. But LCG, of course, fails normalcy test, can't reach 0.8 - 0.12 value range (it will pass normalcy test only if its upper 8-bits of output are used).\n\n[findlcg.txt](https://github.com/rurban/smhasher/files/5106756/findlcg.txt)","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597984410,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODAzMjY1MQ==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-678032651"},"nonce":"SvUu7ZM2iP+Cgc8Fty1oxprpol0=","message":"If you use only upper 8-bits of such LCG output, it will pass PractRand tests up to 1 GB.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597985834,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODAzODMxMg==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-678038312"},"nonce":"7c7AB5jPGiq9BX35TbdeVX7lHes=","message":"LCG can be easily upgraded to pass beyond 1GB in PractRand. Example LCG which passes 16 GB threshold if upper 8-bits of output are used on each round. (the values were also found via `findlcg.txt` above, but with an added xorshift).\n```\nconst uint64_t lcg1 = 6449002856053061667ULL;\nconst uint64_t lcg2 = 2168563226064687862ULL;\nuint64_t Seed = 9104992244502867339ULL;\n...\nSeed = Seed * lcg1 + lcg2;\nSeed ^= Seed \u003e\u003e 32;\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597998717,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0NzUzMTI4"},"nonce":"sJ+1BGtRQx6eCoG6zzhU/0qE5K8=","target":"bcb71042a4b6b88887067ccb98cc232774750987679d0677995fd7912b103f84","message":"LCG can be easily upgraded to pass beyond 1GB in PractRand. Example LCG which passes 64 GB threshold if only upper 32 bits of Seed are used on each round. (The values were also found via `findlcg.txt` above, but with an added xorshift).\n```\nconst uint64_t lcg1 = 6449002856053061667ULL;\nconst uint64_t lcg2 = 2168563226064687862ULL;\nuint64_t Seed = 9104992244502867339ULL;\n...\nSeed = Seed * lcg1 + lcg2;\nSeed ^= Seed \u003e\u003e 32;\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597999014,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0NzU0MTkx"},"nonce":"lxohcOvwpEOA51EO6XJ/84NHDdw=","target":"bcb71042a4b6b88887067ccb98cc232774750987679d0677995fd7912b103f84","message":"LCG can be easily upgraded to pass beyond 1GB in PractRand. Example LCG which passes 128 GB threshold if only upper 32 bits of Seed are used on each round. (The values were also found via `findlcg.txt` above, but with an added xorshift).\n```\nconst uint64_t lcg1 = 6449002856053061667ULL;\nconst uint64_t lcg2 = 2168563226064687862ULL;\nuint64_t Seed = 9104992244502867339ULL;\n...\nSeed = Seed * lcg1 + lcg2;\nSeed ^= Seed \u003e\u003e 32;\n```","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597986254,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODA0MDAzNw==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-678040037"},"nonce":"RX3gBkL/+tJss3DhsgFH6LKj10Y=","message":"This is based on pre-defined seeds, may not work with random seeds. This is not as effective as PRVHASH which outputs random 4 bytes per round, without dependency on the seed value.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597999074,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6Mzk0NzU0Mzk3"},"nonce":"m8fj0aVRkNG1zTbFB02EqhgYgf8=","target":"8ab4432b3235e26044fcdd2dd622feae148c75d6a92e6cb14f9a2a80f7cc0150","message":"This is based on pre-defined seeds, may not work with random seeds. This is not as effective as PRVHASH which works without dependency on the seed value.","files":null}]}