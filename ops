{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609592660,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0NzQxMzQ3MjQ="},"nonce":"QMHMkDFtoKLNeb22V87gYOdUU3U=","target":"03fd4131b79f94c16de6212bfc85e20eb4bd9f84e775457fc64d89e9442020d8","message":"I've recently studied wyhash. Right now wyhash processes (\"mixes\") message bi-directionally (from start, and from end). While it does work as it is, passes SMHasher tests, its structure \"breaks\" on Permutation tests if the message is processed sequentially instead. As I'm developing PRVHASH myself, I've found similarities with wyhash - the functions are quite different, but have similar issues. This is the main reason I'm unable to increase its performance by a factor of 2 - this would require bi-directional processing, which makes streamed hashing impossible. (I'm not quite sure what's the purpose of high-speed hash function if it can't hash files in a streamed mode - I do not think anyone is going to keep multi-gigabyte files in memory).","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609592683,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0NzQxMzQ3Njg="},"nonce":"b9Jwc2YeYGr6f9GbsiEP8An6l1w=","target":"03fd4131b79f94c16de6212bfc85e20eb4bd9f84e775457fc64d89e9442020d8","message":"I've recently studied wyhash. Right now wyhash processes (\"mixes\") message bi-directionally (from start, and from end). While it does work as it is, passes SMHasher tests, its structure \"breaks\" on Permutation tests if the message is processed sequentially instead. As I'm developing PRVHASH myself, I've found similarities with wyhash - the functions are quite different, but have similar issues. This is the main reason I'm unable to increase its performance further by a factor of 2 - this would require bi-directional processing, which makes streamed hashing impossible. (I'm not quite sure what's the purpose of high-speed hash function if it can't hash files in a streamed mode - I do not think anyone is going to keep multi-gigabyte files in memory).","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609592786,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0NzQxMzQ4ODE="},"nonce":"0LveOpi3aY/i90gTtY3YWflzEhA=","target":"03fd4131b79f94c16de6212bfc85e20eb4bd9f84e775457fc64d89e9442020d8","message":"I've recently studied wyhash. Right now wyhash processes (\"mixes\") message bi-directionally (from start, and from end). While it does work as it is, passes SMHasher tests, its structure \"breaks\" on Permutation tests if the message is processed sequentially instead. In sequential mode, the structure only allows mixing of a single 64-bit message word, otherwise correlations arise. As I'm developing PRVHASH myself, I've found similarities with wyhash - the functions are quite different, but have similar issues. This is the main reason I'm unable to increase its performance further by a factor of 2 - this would require bi-directional processing, which makes streamed hashing impossible. (I'm not quite sure what's the purpose of high-speed hash function if it can't hash files in a streamed mode - I do not think anyone is going to keep multi-gigabyte files in memory).","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609593092,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0NzQxMzUzNjQ="},"nonce":"R1vdJWt+SznzCgy9dzshYeB6MG4=","target":"03fd4131b79f94c16de6212bfc85e20eb4bd9f84e775457fc64d89e9442020d8","message":"I've recently studied wyhash. Right now wyhash processes (\"mixes\") message bi-directionally (from start, and from end). While it does work as it is, passes SMHasher tests, its structure \"breaks\" on Permutation tests if the message is processed sequentially instead. In sequential mode, the structure only allows mixing of a single 64-bit message word, if two 64-bit message words are mixed per round, correlations arise. As I'm developing PRVHASH myself, I've found similarities with wyhash - the functions are quite different, but have similar issues. This is the main reason I'm unable to increase its performance further by a factor of 2 - this would require bi-directional processing, which makes streamed hashing impossible. (I'm not quite sure what's the purpose of high-speed hash function if it can't hash files in a streamed mode - I do not think anyone is going to keep multi-gigabyte files in memory).","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609593120,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0NzQxMzU0MTc="},"nonce":"B2jkk2CmG4Mwn3E5syWWE+UBrgI=","target":"03fd4131b79f94c16de6212bfc85e20eb4bd9f84e775457fc64d89e9442020d8","message":"I've recently studied wyhash. Right now wyhash processes (\"mixes\") message bi-directionally (from start, and from end). While it does work as it is, passes SMHasher tests, its structure \"breaks\" on Permutation tests if the message is processed sequentially instead. In sequential mode, the structure only allows mixing of a single 64-bit message word, if two 64-bit message words are mixed per round, correlations arise. As I'm developing PRVHASH myself, I've found similarities with wyhash - the functions are quite different, but have similar issues. This is the main reason I'm unable to increase my function's performance further by a factor of 2 - this would require bi-directional processing, which makes streamed hashing impossible. (I'm not quite sure what's the purpose of high-speed hash function if it can't hash files in a streamed mode - I do not think anyone is going to keep multi-gigabyte files in memory).","files":null}]}