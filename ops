{"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"ops":[{"type":6,"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"timestamp":1549914166,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4MjgxNTg0MQ=="},"nonce":"JJmKPzPkKGnXlX/JtkpQbsNpYKc=","target":"a16a3a1e58a0e4318893b26b3bf6133d10e4dbde105c28c176f3dbe2e4371be0","message":"Hi,\nI've been trying for quite a while now to get our blake2s hash added however I've been running into issues when trying to compile.  I'm not sure if these issues I'm having are staring me right in the face but unfortunately I can't figure it out.  Essentially, I added 3 header files and a C file.  I assumed all I needed to do was add the blake2s.c into the cmakelists.txt add_library() function but that doesn't seem to help.  Can anyone give me a hand here?  I'd really appreciate it.  \n\nLet me go through what all I've added to make sure you have all the info you may need to help.\nI have:\nblake2.h\nblake2-impl.h\nblake2s.h\nblake2s.c\n\nI have included blake2s.c in the add_library() function in CMakeLists.txt\n``` cmake\nadd_library(\n    SMHasherSupport\n    // ......others\n    blake2s.c\n)\n```\nI have included blake2s.h in Hashes.h as well as given the following method definition:\n``` cpp\n// Hashes.h\n#include \"blake2s.h\"\n// ....other includes\n\nvoid blake2s (const void *key, int len, uint32_t seed, void *out);\n// ...….other has functions follow\n```\nIn Hashes.cpp I have implemented the method.\n``` cpp\nvoid\nblake2s(const void *key, int len, uint32_t seed, void *out)\n{\n    my_blake2s((char *)key, len, seed, (char *)out;\n}\n```\nLastly, in main.cpp I have put blake2s into g_hashes[]\n``` cpp\nHashInfo g_hashes[] =\n{\n    { blake2s, 32, 0x0, \"blake2s\", \"blake2s 32-bit cryptographic hash function\"},\n    // DoNothingHash and so on goes here\n```\nNote: I'm still having trouble understanding what values are coming through key, len, seed, and out but I'm assuming your definition of \"key\" is the string that you are trying to hash, len is the length of that string, seed is a random number to give an extra level of protection on the hash?  Similar to a salt?  And out is the final hash string?  It seems everyone has a different term for things when it comes to hashing as the blake2s that my work is using says the key is the salt.  \nAnyways......this is what I got so far and everytime I try to compile, I receive this:\n```\n...\n...\n[98%] Building CXX object CMakeFiles/SMHasher.dir/main.cpp.o\n[100%] Linking CXX executable SMHasher\n./usr/bint/ld: libSMHasherSupport.a(Hashes.cpp.o): in function `blake2s(void const*, int, unsigned int, void*)':\nHashes.cpp:(.text+0x1): undefined reference to `my_blake2s(void const*, int, unsigned int, void*)'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/SMHasher.dir/build.make:85: SMHasher] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:110: CMakeFiles/SMHasher.dir/all] Error 2\nmake: *** [Makefile:84: all] Error 2\n```\nSo it seems everything goes fine until it's time to read from one my of files that aren't in the original repo (the my_blake2s file being in blake2s.c).  \n\nThanks!\nMatt","files":null},{"type":6,"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"timestamp":1549914528,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4MjgxODg3Mw=="},"nonce":"aPvoc4ynCQdotaYJgJ02VshmlS8=","target":"a16a3a1e58a0e4318893b26b3bf6133d10e4dbde105c28c176f3dbe2e4371be0","message":"Hi,\nI've been trying for quite a while now to get our blake2s hash added however I've been running into issues when trying to compile.  I'm not sure if these issues I'm having are staring me right in the face but unfortunately I can't figure it out.  Essentially, I added 3 header files and a C file.  I assumed all I needed to do was add the blake2s.c into the cmakelists.txt add_library() function but that doesn't seem to help.  Can anyone give me a hand here?  I'd really appreciate it.  \n\nLet me go through what all I've added to make sure you have all the info you may need to help.\nI have:\nblake2.h\nblake2-impl.h\nblake2s.h\nblake2s.c\n\nI have included blake2s.c in the add_library() function in CMakeLists.txt\n``` cmake\nadd_library(\n    SMHasherSupport\n    // ......others\n    blake2s.c\n)\n```\nI have included blake2s.h in Hashes.h as well as given the following method definition:\n``` cpp\n// Hashes.h\n#include \"blake2s.h\"\n// ....other includes\n\nvoid blake2s (const void *key, int len, uint32_t seed, void *out);\n// ...….other has functions follow\n```\nIn Hashes.cpp I have implemented the method.\n``` cpp\nvoid\nblake2s(const void *key, int len, uint32_t seed, void *out)\n{\n    my_blake2s((char *)key, len, seed, (char *)out;\n}\n```\nLastly, in main.cpp I have put blake2s into g_hashes[]\n``` cpp\nHashInfo g_hashes[] =\n{\n    { blake2s, 32, 0x0, \"blake2s\", \"blake2s 32-bit cryptographic hash function\"},\n    // DoNothingHash and so on goes here\n```\nNote: I'm still having trouble understanding what values are coming through key, len, seed, and out but I'm assuming your definition of \"key\" is the string that you are trying to hash, len is the length of that string, seed is a random number to give an extra level of protection on the hash?  Similar to a salt?  And out is the final hash string?  It seems everyone has a different term for things when it comes to hashing as the blake2s that my work is using says the key is the salt.  \nAnyways......this is what I got so far and everytime I try to compile, I receive this:\n```\n...\n...\n[98%] Building CXX object CMakeFiles/SMHasher.dir/main.cpp.o\n[100%] Linking CXX executable SMHasher\n./usr/bint/ld: libSMHasherSupport.a(Hashes.cpp.o): in function `blake2s(void const*, int, unsigned int, void*)':\nHashes.cpp:(.text+0x1): undefined reference to `my_blake2s(void const*, int, unsigned int, void*)'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/SMHasher.dir/build.make:85: SMHasher] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:110: CMakeFiles/SMHasher.dir/all] Error 2\nmake: *** [Makefile:84: all] Error 2\n```\nSo it seems everything goes fine until it's time to read from one my of files that aren't in the original repo (the my_blake2s file being in blake2s.c).  I have added much smaller hash functions (like Djb2) directly to Hashes.cpp and after building first time I'm used to getting a verification hex code to slot in however I have not been able to get all of blake2s directly into Hashes.cpp without the multiple files (I'm an intern so don't have too much experience working with larger projects until recently - 4months ago).  \n\nThanks!\nMatt","files":null},{"type":6,"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"timestamp":1549914695,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4MjgyMDA4MQ=="},"nonce":"uTZ4FoqzylpbGo1LeBJxc1iIZIc=","target":"a16a3a1e58a0e4318893b26b3bf6133d10e4dbde105c28c176f3dbe2e4371be0","message":"Hi,\nI've been trying for quite a while now to get our blake2s hash added however I've been running into issues when trying to compile.  I'm not sure if these issues I'm having are staring me right in the face but unfortunately I can't figure it out.  Essentially, I added 3 header files and a C file.  I assumed all I needed to do was add the blake2s.c into the cmakelists.txt add_library() function but that doesn't seem to help.  Can anyone give me a hand here?  I'd really appreciate it.  \n\nLet me go through what all I've added to make sure you have all the info you may need to help.\nI have:\nblake2.h\nblake2-impl.h\nblake2s.h\nblake2s.c\n\nI have included blake2s.c in the add_library() function in CMakeLists.txt\n``` cmake\nadd_library(\n    SMHasherSupport\n    # ......others\n    blake2s.c\n)\n```\nI have included blake2s.h in Hashes.h as well as given the following method definition:\n``` cpp\n// Hashes.h\n#include \"blake2s.h\"\n// ....other includes\n\nvoid blake2s (const void *key, int len, uint32_t seed, void *out);\n// ...….other has functions follow\n```\nIn Hashes.cpp I have implemented the method.\n``` cpp\nvoid\nblake2s(const void *key, int len, uint32_t seed, void *out)\n{\n    my_blake2s((char *)key, len, seed, (char *)out;\n}\n```\nLastly, in main.cpp I have put blake2s into g_hashes[]\n``` cpp\nHashInfo g_hashes[] =\n{\n    { blake2s, 32, 0x0, \"blake2s\", \"blake2s 32-bit cryptographic hash function\"},\n    // DoNothingHash and so on goes here\n```\nNote: I'm still having trouble understanding what values are coming through key, len, seed, and out but I'm assuming your definition of \"key\" is the string that you are trying to hash, len is the length of that string, seed is a random number to give an extra level of protection on the hash?  Similar to a salt?  And out is the final hash string?  It seems everyone has a different term for things when it comes to hashing as the blake2s that my work is using says the key is the salt.  \nAnyways......this is what I got so far and everytime I try to compile, I receive this:\n```\n...\n...\n[98%] Building CXX object CMakeFiles/SMHasher.dir/main.cpp.o\n[100%] Linking CXX executable SMHasher\n./usr/bint/ld: libSMHasherSupport.a(Hashes.cpp.o): in function `blake2s(void const*, int, unsigned int, void*)':\nHashes.cpp:(.text+0x1): undefined reference to `my_blake2s(void const*, int, unsigned int, void*)'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/SMHasher.dir/build.make:85: SMHasher] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:110: CMakeFiles/SMHasher.dir/all] Error 2\nmake: *** [Makefile:84: all] Error 2\n```\nSo it seems everything goes fine until it's time to read from one my of files that aren't in the original repo (the my_blake2s file being in blake2s.c).  I have added much smaller hash functions (like Djb2) directly to Hashes.cpp and after building first time I'm used to getting a verification hex code to slot in however I have not been able to get all of blake2s directly into Hashes.cpp without the multiple files (I'm an intern so don't have too much experience working with larger projects until recently - 4months ago).  \n\nThanks!\nMatt","files":null},{"type":6,"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"timestamp":1549914879,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4MjgyMTQ4Ng=="},"nonce":"8ItN2ptxxIw8xfPkkrnwexl0uqk=","target":"a16a3a1e58a0e4318893b26b3bf6133d10e4dbde105c28c176f3dbe2e4371be0","message":"Hi,\nI've been trying for quite a while now to get our blake2s hash added however I've been running into issues when trying to compile.  I'm not sure if these issues I'm having are staring me right in the face but unfortunately I can't figure it out.  Essentially, I added 3 header files and a C file.  I assumed all I needed to do was add the blake2s.c into the cmakelists.txt add_library() function but that doesn't seem to help.  Can anyone give me a hand here?  I'd really appreciate it.  \n\nLet me go through what all I've added to make sure you have all the info you may need to help.\nI have:\nblake2.h\nblake2-impl.h\nblake2s.h\nblake2s.c\n\nI have included blake2s.c in the add_library() function in CMakeLists.txt\n``` cmake\n# CMakeLists.txt\nadd_library(\n    SMHasherSupport\n    # ......others\n    blake2s.c\n)\n```\nI have included blake2s.h in Hashes.h as well as given the following method definition:\n``` cpp\n// Hashes.h\n#include \"blake2s.h\"\n// ....other includes\n\nvoid blake2s (const void *key, int len, uint32_t seed, void *out);\n// ...….other has functions follow\n```\nIn Hashes.cpp I have implemented the method.\n``` cpp\n// Hashes.cpp\nvoid\nblake2s(const void *key, int len, uint32_t seed, void *out)\n{\n    my_blake2s((char *)key, len, seed, (char *)out;\n}\n```\nLastly, in main.cpp I have put blake2s into g_hashes[]\n``` cpp\n// main.cpp\nHashInfo g_hashes[] =\n{\n    { blake2s, 32, 0x0, \"blake2s\", \"blake2s 32-bit cryptographic hash function\"},\n    // DoNothingHash and so on goes here\n```\nNote: I'm still having trouble understanding what values are coming through key, len, seed, and out but I'm assuming your definition of \"key\" is the string that you are trying to hash, len is the length of that string, seed is a random number to give an extra level of protection on the hash?  Similar to a salt?  And out is the final hash string?  It seems everyone has a different term for things when it comes to hashing as the blake2s that my work is using says the key is the salt.  \nAnyways......this is what I got so far and everytime I try to compile, I receive this in terminal:\n```\n...\n...\n[98%] Building CXX object CMakeFiles/SMHasher.dir/main.cpp.o\n[100%] Linking CXX executable SMHasher\n./usr/bint/ld: libSMHasherSupport.a(Hashes.cpp.o): in function `blake2s(void const*, int, unsigned int, void*)':\nHashes.cpp:(.text+0x1): undefined reference to `my_blake2s(void const*, int, unsigned int, void*)'\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/SMHasher.dir/build.make:85: SMHasher] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:110: CMakeFiles/SMHasher.dir/all] Error 2\nmake: *** [Makefile:84: all] Error 2\n```\nSo it seems everything goes fine until it's time to read from one my of files that aren't in the original repo (the my_blake2s file being in blake2s.c).  I have added much smaller hash functions (like Djb2) directly to Hashes.cpp and after building first time I'm used to getting a verification hex code to slot in however I have not been able to get all of blake2s directly into Hashes.cpp without the multiple files (I'm an intern so don't have too much experience working with larger projects until recently - 4months ago).  \n\nThanks!\nMatt","files":null},{"type":2,"author":{"id":"94515583c630920ec1a357a5bd15c2d7a5e601fa77a2d13edf8b21c032f28e0b"},"timestamp":1549898128,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjEzMDg0NjgyOQ=="},"nonce":"nRvo8MdRs+4H3CBzPWFBDrEt1FQ=","title":"Issues adding hash, linker errors","was":"Issues adding hash, linker errors"}]}