{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":1,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1620089934,"metadata":{"github-id":"MDU6SXNzdWU4NzUwMTkxMTM=","github-url":"https://github.com/rurban/smhasher/issues/196","origin":"github"},"nonce":"3lK53Zj4sf46hapkC7Hj44zKMz8=","title":"New test: hash invariance","message":"This test takes a list of pre-calculated and statistically non-colliding hashes, and produces a new list of hashes, that then should be tested for collision. This test is viable as PRVHASH passes it.\n\nFor each input hash, such simple permutation should be done. It is not a perfect \"shuffling\", but should be enough for practical cases.\n```\n\tfor( int i = 0; i \u003c HashLen * 8; i++ )\n\t{\n\t\tint sw1 = (int) ( rand() % HashLen );\n\t\tint sw2 = (int) ( rand() % HashLen );\n\t\tuint8_t t = Hash[ sw1 ];\n\n\t\tfor( int j = 0; j \u003c 8; j++ )\n\t\t{\n\t\t\tint b = (int) ( rand() \u0026 7 );\n\t\t\tint v1 = ( t \u003e\u003e j ) \u0026 1;\n\t\t\tint v2 = ( t \u003e\u003e b ) \u0026 1;\n\t\t\tt = ( t \u0026 ~( 1 \u003c\u003c j | 1 \u003c\u003c b )) | ( v2 \u003c\u003c j ) | ( v1 \u003c\u003c b );\n\t\t}\n\n\t\tHash[ sw1 ] = Hash[ sw2 ];\n\t\tHash[ sw2 ] = t;\n\t}\n```","files":null}]}