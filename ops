{"author":{"id":"9556b3528bb71e828da55722f4a91f25e84fafcbbdb4e86feb42a2d9eac4693e"},"ops":[{"type":3,"author":{"id":"9556b3528bb71e828da55722f4a91f25e84fafcbbdb4e86feb42a2d9eac4693e"},"timestamp":1571411775,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0Mzc5MjU0MQ==","github-url":"https://github.com/rurban/smhasher/issues/73#issuecomment-543792541"},"nonce":"4SnoPeDcE1QadbMGEFtE+o3gTTs=","message":"@Sanmayce, could you add a few strong hash-functions as reference for a collisions rate?\n\nFor instance, 32-bits from any SHA-like hash and [Pelle Evensen's mixer](http://mostlymangling.blogspot.com/2019/01/better-stronger-mixer-and-test-procedure.html), i.e.\n```\n// New mixer, \"rrxmrrxmsx_0\", failing one subtest of RR-64-40-TF2-0.94.\n// With a unit counter starting at 0, it has passed 128 TB of\n// PractRand 0.94 -tf 2 without anomalies found past 2 TB.\nuint64_t rrxmrrxmsx_0(uint64_t v) {\n  v ^= ror64(v, 25) ^ ror64(v, 50);\n  v *= 0xA24BAED4963EE407UL;\n  v ^= ror64(v, 24) ^ ror64(v, 49);\n  v *= 9FB21C651E98DF25UL;\n  return v ^ v \u003e\u003e 28;\n}\n```","files":null}]}