{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598122634,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk1Nzk4NDI="},"nonce":"VjgzqK6tYkxt5rNZEPUt6gBtrW4=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 130% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (20 times faster, irreversible).\n\nHere's an example now to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598123021,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk1ODA4NTc="},"nonce":"LP+88fMWfvORE3sOBlssAb/G4Cs=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 140% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (20 times faster, irreversible).\n\nHere's an example now to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598172525,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk2NTg3NTU="},"nonce":"aQ15U7JMGy3tAKwf82xtU1eKLXg=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 170% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (20 times faster, irreversible).\n\nHere's an example now to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598172543,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk2NTg3ODc="},"nonce":"38jsvWgjjvRtq50ol04wgi9AzZo=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 170% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (50 times faster, irreversible).\n\nHere's an example now to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598180720,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk2NzMzMTc="},"nonce":"Kzjd4ebmZzr86IPs2qN/Ww4pyk4=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 170% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (50 times faster, irreversible). https://github.com/avaneev/prvhash\n\nHere's an example now to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598180731,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk2NzMzMzI="},"nonce":"Ibx8Vp+gRAM6knDekY6MuLZbdck=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 170% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (50 times faster, irreversible). https://github.com/avaneev/prvhash\n\nHere's an example how to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598209347,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTk3Mjk0MzI="},"nonce":"lsZxFZbd8fySVp9Ua7OBZPEG98U=","target":"02cf82eb5eb131ae0d09329e35b75f16226514a41115ef1bd1d84fb88369734a","message":"This version does not change the function in `prvhash42` - only its parameters. But this version implements a streamed hashing functions `prvhash42s`, it has 170% faster raw speed. The speed and security boost is substantial with this function, the amount of entropy mixing happening is unbelievable. I think this is better than SHA256 in every aspect (35 times faster, irreversible). https://github.com/avaneev/prvhash\n\nHere's an example how to pass seed to it. (it actually accepts 4x 64-bit seeds).\n```\nPRVHASH42S_CTX ctx;\nuint64_t seedb[ 4 ] = { seed, seed, seed, seed };\nprvhash42s_init( \u0026ctx, (uint8_t*) out, 4, seedb, 0 );\nprvhash42s_update( \u0026ctx, (const uint8_t*) key, len );\nprvhash42s_final( \u0026ctx );\n```","files":null},{"type":2,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598172519,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzY4MjY1MDM1NA=="},"nonce":"qTVyIuoa5M/Q2OIQ2SacEeASN0s=","title":"PRVHASH 2.14","was":"PRVHASH 2.14"},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598182089,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODc2MjQyNA==","github-url":"https://github.com/rurban/smhasher/issues/144#issuecomment-678762424"},"nonce":"rK6xoY814aYAth1J7WGZaLQNNAo=","message":"Please update to the latest version of `prvhash42s` - I've rearranged input data block which results in better MomentChi2 scores. Sorry for the hassle.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598194104,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODc4MzI3OA==","github-url":"https://github.com/rurban/smhasher/issues/144#issuecomment-678783278"},"nonce":"1l9ETc0x4nkfauI1SQYbVE73M4g=","message":"I mean the latest commit. I have not updated the version by mistake.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598238765,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3ODg4MDk1OQ==","github-url":"https://github.com/rurban/smhasher/issues/144#issuecomment-678880959"},"nonce":"q0+JTn23c/q4Czi+ZdMkMXmwgs4=","message":"Please close the issue now - I've released v2.15 which should be rechecked anyway, at least its speeds.","files":null}]}