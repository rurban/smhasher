{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":1,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1598152668,"metadata":{"github-id":"MDU6SXNzdWU2ODQxMDYzOTU=","github-url":"https://github.com/rurban/smhasher/issues/145","origin":"github"},"nonce":"cbmEAtypswCYqsOKJ0JuGVXNAoc=","title":"New test: the avalanche criterion","message":"This test is best used in Words test. It calculates the average bit flip count in pair-wise hash comparisons, demonstrating the closeness to the strict avalanche criterion (50.0%).\n\nExample code:\n```\n\tconst int HashLen = 32;\n\tuint8_t Hash1[ HashLen ];\n\tuint8_t Hash2[ HashLen ];\n\tuint64_t bc = 0;\n\n\tfor( i = 0; i \u003c StringList.getItemCount() - 1; i++ )\n\t{\n\t\tprvhash42s_oneshot( (uint8_t*) VOXSTR( StringList[ i ]),\n\t\t\tStringList[ i ].getLength(), Hash1, HashLen );\n\n\t\tprvhash42s_oneshot( (uint8_t*) VOXSTR( StringList[ i + 1 ]),\n\t\t\tStringList[ i + 1 ].getLength(), Hash2, HashLen );\n\n\t\tbc += countDiffBits( Hash1, Hash2, HashLen );\n\t}\n\n\tprintf( \"Avalanche criterion: %.1f%%\\n\", 100.0 * bc /\n\t\t( StringList.getItemCount() - 1 ) / ( HashLen * 8 ));\n```\n\n```\ninline int countDiffBits( const uint8_t* const Hash1,\n\tconst uint8_t* const Hash2, const int HashLen )\n{\n\tint cc = 0;\n\tint m;\n\n\tfor( m = 0; m \u003c HashLen; m++ )\n\t{\n\t\tuint8_t v1 = Hash1[ m ];\n\t\tuint8_t v2 = Hash2[ m ];\n\t\tint j;\n\n\t\tfor( j = 0; j \u003c 8; j++ )\n\t\t{\n\t\t\tif(( v1 \u0026 1 ) != ( v2 \u0026 1 ))\n\t\t\t{\n\t\t\t\tcc++;\n\t\t\t}\n\n\t\t\tv1 \u003e\u003e= 1;\n\t\t\tv2 \u003e\u003e= 1;\n\t\t}\n\t}\n\n\treturn( cc );\n}\n```","files":null}]}