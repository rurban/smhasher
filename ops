{"author":{"id":"ee29a6caff814b8d6b23585769cb28de152eaf7439d99f006195e7a2265c346d"},"ops":[{"type":3,"author":{"id":"ee29a6caff814b8d6b23585769cb28de152eaf7439d99f006195e7a2265c346d"},"timestamp":1585663020,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNjY0Mzk5OQ==","github-url":"https://github.com/rurban/smhasher/issues/114#issuecomment-606643999"},"nonce":"xGbYpQUzGEmWeukKCeFI4X/ILJg=","message":"This is basic statistics.\n\nIt comes out approximately like this: Every time you design a hash function, roll two dice twice, if either roll is two sixes, your function fails this test.\n\nWhen we roll two dice the expected number of sixes is 1/3, so indeed we get 0 sixes most of the time, but sometimes we do get two sixes.\n\nDeclaring a hash function broken based on this test is like declaring a pair of dice loaded because you rolled two sixes.\n\nIf you actually want to know whether or not a die is loaded, the best you can do is to roll it a lot of times, note the results, and then do the statistics to determine if any roll comes out too often to fit the ideal die model with reasonable probability. In general, the more tests, the less loaded the die has to be in order for the skew to be notable.\n\nA statistical hash test suite ought to work the same way, and for a quite limited test like this you probably shouldn't report a problem for less than somewhere around 5 collisions (probability: 29 in a million).","files":null}]}