{"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"ops":[{"type":1,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1573461742,"metadata":{"github-id":"MDU6SXNzdWU1MjA4MTM3OTU=","github-url":"https://github.com/rurban/smhasher/issues/78","origin":"github"},"nonce":"cqarwqEDgkWW4XHKg4hCVcrXVls=","title":"simplify the hash API, call the hash function naturally","message":"Call the hash function naturally\n  e.g. 32bit: `uint32_t hash(const char* key, int len, uint32_t seed);`\n  or 64bit: `uint64_t hash(const char* key, int len, uint64_t seed);`\n\nAdd `pfhash` templates for 32bit, 64bit (skip 128bit? not really needed).\nAdd `\\_test` functions only for those with a different signature: e.g. seed as first `PMurHash32(MH_UINT32 seed, const void *key, int len);`\n\nSo one doesn't have to provide unnatural API's just to get an smhasher advantage.\n\nMaybe provide hash classes for all functions, seperated into bitsize, seedsize, with optional init (clhash), and converter (seed first, ...)","files":null}]}