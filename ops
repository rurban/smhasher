{"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"ops":[{"type":3,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1571139085,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0MjE2NzU1Ng==","github-url":"https://github.com/rurban/smhasher/issues/73#issuecomment-542167556"},"nonce":"fK01d1klosippz9UDqH0cyu6K6s=","message":"Sanmayce \u003cnotifications@github.com\u003e schrieb am Di., 15. Okt. 2019, 13:09:\n\n\u003e Thank you for running it against SMHASHER, but saying:\n\u003e\n\u003e This is a very bad hash.\n\u003e\n\u003e\nIs true only within this synthetic tester, which is too strict and actually\n\u003e discards the best practical hashers for real usecase scenarios, like\n\u003e English n-grams.\n\u003e\n\u003e Agreed. In fast hash tables I still use FNV1a, which is similarly bad but\nbeats all others.\n\n(just add \\0's somewhere in the key, and it will collide),\n\u003e\n\u003e\nHm, I don't follow, maybe you meant at the end?! This is easily fixable (I\n\u003e was aware of it) with adding the KEYLENGTH to the hash value at the very\n\u003e end.\n\u003e\n\u003e \\0 could also be in the middle. It's the multiplication by 0.\nI fixed it in some FNV variants.\n\n37.335 cycles/hash\n\u003e\n\u003e\n\nIt only proves how synthetic these values are, in practice, I showed it is\n\u003e irrelevant.\n\u003e QWORD fetching is around the corner...\n\u003e\n\u003e By the way, what CPU were you using?\n\u003e\nCurrently a bad one, an old i5, but the problem are the recent kernel\nmitigations. Twice as slow as last year.","files":null}]}