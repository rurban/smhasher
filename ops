{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597806570,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc5ODc5OTk="},"nonce":"FzcOnbdsjcUkk1HCSUkpz0WUXgU=","target":"bac77ec4fb244288bbbf531f51a6d11a64372f9641e19ea65ff7e3f53e1c922f","message":"This is a simple test which may be applied to all tests like the bit bias test.\n\n1. 256-element array of `double` counters should be initialized to zero.\n2. Take each byte of each resulting hash, and increment a counter in 1. based on the byte value.\n3. Normalize the counts by dividing by the average count.\n4. Evaluate the resulting square deviations (DEVSQ in Excel), multiply by average count. It should be in some predefined \"safe\" range: e.g. 200-300. Too low values are unnatural (e.g. LCG-like randomness) while too high values signal non-uniformity.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597806838,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc5ODkxNjE="},"nonce":"RXUWZQ27XVNprxwFw/d6mFccXvI=","target":"bac77ec4fb244288bbbf531f51a6d11a64372f9641e19ea65ff7e3f53e1c922f","message":"This is a simple test which may be applied to all tests like the bit bias test.\n\n1. 256-element array of `double` counters should be initialized to zero.\n2. Take each byte of each resulting hash, and increment counter in 1. based on the byte value.\n3. Normalize the counts by dividing by the average count.\n4. Evaluate the resulting square deviations (DEVSQ in Excel), multiply by average count. It should be in some predefined \"safe\" range: e.g. 200-300. Too low values are unnatural (e.g. LCG-like randomness) while too high values signal non-uniformity.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597807597,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc5OTIxMjM="},"nonce":"v490+8vYKowtxuo3s+ko1lDIRAE=","target":"bac77ec4fb244288bbbf531f51a6d11a64372f9641e19ea65ff7e3f53e1c922f","message":"This is a simple test which may be applied to all tests like the bit bias test.\n\n1. 256-element array of `double` counters should be initialized to zero.\n2. Take each byte of each resulting hash, and increment counter in 1. based on the byte value.\n3. Normalize the counts by dividing by the average count.\n4. Sum the resulting square deviations (DEVSQ in Excel), multiply by average count, divide by 256. It should be in some predefined \"safe\" range: e.g. 0.7-1.4. Too low values are unnatural (e.g. LCG-like randomness) while too high values signal non-uniformity. LCG-like randomness is probably fine, but tells about hash quality.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597829438,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTgxMDc5Njk="},"nonce":"saunv8/nuLQ7sKXpdLk/Ud018Os=","target":"bac77ec4fb244288bbbf531f51a6d11a64372f9641e19ea65ff7e3f53e1c922f","message":"This is a simple test which may be applied to all tests like the bit bias test.\n\n1. 256-element array of `double` counters should be initialized to zero.\n2. Take each byte of each resulting hash, and increment counter in 1. based on the byte value.\n3. Normalize the counts by dividing by the average count.\n4. Sum the resulting square deviations (DEVSQ in Excel), multiply by average count, divide by 256. It should be in some predefined \"safe\" range: e.g. 0.7-1.3. Too low values are unnatural (e.g. LCG-like randomness) while too high values signal non-uniformity. LCG-like randomness is probably fine, but tells about hash quality.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597939175,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3Nzc1Mjk0NA==","github-url":"https://github.com/rurban/smhasher/issues/139#issuecomment-677752944"},"nonce":"xQyEFZBh2vfWoYNg+g3YYliKimc=","message":"I actually use this test to generate default seed, it works pretty well. I generate 1 billion bytes with my hash function and evaluate the resulting statistic. Seed that results in 1.0 is pretty good overall.","files":null}]}