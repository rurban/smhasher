{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":1,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1609619882,"metadata":{"github-id":"MDU6SXNzdWU3Nzc1MjE1Mzc=","github-url":"https://github.com/rurban/smhasher/issues/178","origin":"github"},"nonce":"Qooupk9CiO/U7HQcgzwySioRKls=","title":"PRVHASH42F","message":"OK, finally I was able to create a \"competitive speed\" hash function. It gives me 13.2GB/s hashing speed, that should translate to about 14.5GB/s on your bench I think. This hash function `prvhash42f` works similarly to other PRVHASH variants, but is structurally very different - I've not studied it well yet, so I cannot tell much about it yet, except that it works for hashing. `prvhash42` and `prvhash42s` are based on `core` functions that I've studied and described very well, they are far safer bet, even if they are slower.\n\n`prvhash42f` is probably not the best function for table hash use - it's large. But it can stand scrutiny against wyhash-like structures as it does not exploit \"message by message\" multiplications.\n\nhttps://github.com/avaneev/prvhash","files":null}]}