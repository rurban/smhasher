{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597714880,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc0NjI4MDg="},"nonce":"2ksI6ZIcMV6mMqCABEszTbsvlds=","target":"55c2192857003e5cc0b82712bbddcb8228fb7655cdba2d0afd63e552ce0188bf","message":"Hello! It would be useful to collision-test hash function against a common application: password storage.\nE.g. on generated list of 300000 random 6-16-character passwords from the set ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?:;-+=()\u003c\u003e/\\|\"'@#$%\u0026*_^`{}[]\nThis is what password generators usually produce. The mix of different-length passwords is an important part of the test.\n\nSecond test is a collision test on a vocabulary of English words, at least 200000 required.\n\nHere is a good resource of \"security lists\", also worth check in out and adding to this \"security\" tests: https://github.com/danielmiessler/SecLists","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597716715,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc0NzAyMzU="},"nonce":"tHhR3I0ZlMNkG3Ge2Ue19rZrKag=","target":"55c2192857003e5cc0b82712bbddcb8228fb7655cdba2d0afd63e552ce0188bf","message":"Hello! It would be useful to collision-test hash function against a common application: password storage.\nE.g. on generated list of 300000 random 6-16-character passwords from the set ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?:;-+=()\u003c\u003e/\\|\"'@#$%\u0026*_^`{}[]\nThis is what password generators usually produce. The mix of different-length passwords is an important part of the test.\n\nSecond test is a collision test on a vocabulary of English words, at least 200000 required.\n\nThird test is \"common password list\" test. Here is a good resource of \"security lists\", also worth check in out and adding to this \"security\" tests: https://github.com/danielmiessler/SecLists\n\nFourth test is a test on a list that combines all three tests together.","files":null},{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597716734,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTc0NzAzMTc="},"nonce":"TEDFEGd18NbKIkXJqq0uc8Bmquc=","target":"55c2192857003e5cc0b82712bbddcb8228fb7655cdba2d0afd63e552ce0188bf","message":"Hello! It would be useful to collision-test hash function against a common application: password storage.\nE.g. on generated list of 300000 random 6-16-character passwords from the set ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?:;-+=()\u003c\u003e/\\|\"'@#$%\u0026*_^`\nThis is what password generators usually produce. The mix of different-length passwords is an important part of the test.\n\nSecond test is a collision test on a vocabulary of English words, at least 200000 required.\n\nThird test is \"common password list\" test. Here is a good resource of \"security lists\", also worth check in out and adding to this \"security\" tests: https://github.com/danielmiessler/SecLists\n\nFourth test is a test on a list that combines all three tests together.","files":null}]}