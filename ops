{"author":{"id":"73a29ec0f1aa92ee54dad2ae34169f7b6aecd002165a311915338752b44521cc"},"ops":[{"type":3,"author":{"id":"73a29ec0f1aa92ee54dad2ae34169f7b6aecd002165a311915338752b44521cc"},"timestamp":1599284501,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4NzU1NTUwMA==","github-url":"https://github.com/rurban/smhasher/issues/51#issuecomment-687555500"},"nonce":"EZx6owHrwegEfF1uu2uMdyzEPus=","message":"@thomasahle I guess you meant `a^x (mod p)` can be computed in time `O(log X)`.\n\n @ChrisJefferson Another option for hashing an ordered collection: Sort the element hashes and hash the sorted list of element hashes to get the final hash for the ordered collection. The quality of the hash should be better compared to just summing up the element hashes. Of course, sorting is an `O(N log N)` operation, but might be faster than the approach @thomasahle proposed, which has a time complexity of `O(N log X)` and `log X` is essentially given by the number of bits of the hash.","files":null}]}