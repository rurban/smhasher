{"author":{"id":"ee29a6caff814b8d6b23585769cb28de152eaf7439d99f006195e7a2265c346d"},"ops":[{"type":3,"timestamp":1688209739,"metadata":{"github-id":"IC_kwDOARWYbc5gT_MV","github-url":"https://github.com/rurban/smhasher/issues/114#issuecomment-1615852309"},"nonce":"0+iGu5loB3WoPFoPoVZ/A9jy8wk=","message":"OK, I can't build this rep, and I don't think I'll get there without way too much work. So I'm not going to produce a ready-made patch. Also the code in Stats.h looks pretty battle-scarred.\n\nWhat I can do is make a p-value calculator that can easily be integrated by someone else.","files":null},{"type":3,"timestamp":1689419967,"metadata":{"github-id":"IC_kwDOARWYbc5hjqjV","github-url":"https://github.com/rurban/smhasher/issues/114#issuecomment-1636739285"},"nonce":"GrN0l73SEzBe8+O7V4ScJosws8Y=","message":"This got a bit more complicated than I thought it would, but I think I have managed to deal with pretty much every eventuality.\n\nHere is the code: https://github.com/NoHatCoder/pValue_for_smhasher\n\nThe code is in `pvalue.c`, `pvalue_junk.c` has some test code and discarded stuff.\n\nThe Poisson distribution turns into a bad approximation in cases where there is a lot of collisions, in particular in the countPairs=false mode. So I have added in an exact calculation for that, which potentially require a lot of computation, so there is also a cache of results in order to limit how much it runs.\n\nThen there is a coin flip function specifically for the single bit tests.\n\nThe p-values returned by these functions are specifically to interpreted as such: A perfect hash function has `x` probability of producing a p-value of `x` or lower. This only holds as far as `x` is a value that can be produced in the context.\n\nThe coin flip function technically return the lower of 2 p-values.\n\nAs for interpreting the numbers I'd recommend a light flag-for-further-study at values of 1/10000 and lower, and a heavy flag at 1/1000000.","files":null}]}