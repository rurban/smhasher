{"author":{"id":"ee29a6caff814b8d6b23585769cb28de152eaf7439d99f006195e7a2265c346d"},"ops":[{"type":3,"author":{"id":"ee29a6caff814b8d6b23585769cb28de152eaf7439d99f006195e7a2265c346d"},"timestamp":1585809364,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNzY1MDcwOA==","github-url":"https://github.com/rurban/smhasher/issues/114#issuecomment-607650708"},"nonce":"/VPIdm7NVyVF112KBaMx0A7EQBM=","message":"\u003e Can you not say that E(c) = ~ 0.3 so E(2c) = ~ 0.09 ?\n\nNo, it is not that simple, that is why we need the Poisson distribution. Long story short, given certain criteria, the Poisson distribution lets us convert the expected average into the probability of a certain number of events happening, you can't simply multiply the numbers.\n\n\u003e For the first claim, perhaps the idea behind this test is that sparse keys represent some greater vulnerability by being comparatively easier to search for, so hash functions, in order to be more secure, need to have some special case handling of sparse keys to prevent collision.\n\nNo, the idea is that some hash functions don't do proper avalanching, and the sparse test will tend to break those. But it still produces collisions at random, like any other test.\n\nIf you want to see the statistics in action, you could try running the specific test (Sparse 16-bit keys) on Beamsplitter a thousand times using a thousand different seeds.","files":null}]}