{"author":{"id":"0e0db9efebe974bb97e4ff793b33a8bef9e0a4bb09833c866802a945dd9f453a"},"ops":[{"type":3,"timestamp":1687329862,"metadata":{"github-id":"IC_kwDOARWYbc5fYjbL","github-url":"https://github.com/rurban/smhasher/issues/267#issuecomment-1600272075"},"nonce":"TAHFt2E11kYAyiG88zLHkqia9+U=","message":"That was quick! Looks good, just one nitpick. Instead of `0xfedbca9876543210 | seed` I'd suggest `0xfedbca9876543210 ^ seed` in `polymur_seed_init` just to make sure no bits of the seed get lost.\n\nAlso note that, depending on the seed, there is a ~7% chance PolymurHash can fail the Sparse 16-bit key test. But I believe this to be a flaw in the test, see https://github.com/rurban/smhasher/issues/114#issuecomment-1587631635 . So perhaps you may want to re-open that issue.","files":null},{"type":6,"timestamp":1687330051,"metadata":{"github-id":"UCE_lALOARWYbc5fYjbLzjMYX3s"},"nonce":"gR1BdIvKbBtQUlh1KlDIGswz9vU=","target":"3e54c3f17e10c35eee21cf14e164eacac41d70de4878cb3488105be23ee5f962","message":"That was quick! Looks good, just one nitpick. Instead of `0xfedbca9876543210 | seed` I'd suggest `0xfedbca9876543210 ^ seed` in `polymur_seed_init` just to make sure no bits of the seed get lost.\n\nAlso note that, depending on the seed, there is a ~7% chance PolymurHash can fail the Sparse 16-bit key test. But I believe this to be a flaw in the test as even a perfect random oracle does this, see https://github.com/rurban/smhasher/issues/114#issuecomment-1587631635 . So perhaps you may want to re-open that issue.","files":null},{"type":6,"timestamp":1687330336,"metadata":{"github-id":"UCE_lALOARWYbc5fYjbLzjMYais"},"nonce":"OlArWYOwgM+gkSPwOEmdn3AowlE=","target":"3e54c3f17e10c35eee21cf14e164eacac41d70de4878cb3488105be23ee5f962","message":"That was quick! Looks good, just one nitpick on the code. Instead of `0xfedbca9876543210 | seed` I'd suggest `0xfedbca9876543210 ^ seed` in `polymur_seed_init` just to make sure no bits of the seed get lost.\n\nAlso note that, depending on the seed, there is a ~7% chance PolymurHash can fail the Sparse 16-bit key test. But I believe this to be a flaw in the test as even a perfect random oracle does this, see https://github.com/rurban/smhasher/issues/114#issuecomment-1587631635 . So perhaps you may want to re-open that issue.\n\nAnd perhaps PolymurHash could get added to your list of \"fastest hash functions on x86_64 without quality problems\", because I do think its speed qualifies it as it's faster than some of those on the list, and Polymur gives much better guarantees than all of those on the list.","files":null}]}