{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597242902,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkwOTYzMQ==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672909631"},"nonce":"KzHKyt/AoCnx1KT5GkCNbA/5Pxo=","message":"Thanks, it's not much slower for 4 byte average strings. Which tests it does not pass?","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597243523,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkxNTgwMQ==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672915801"},"nonce":"H/kC0ro9/RvqbqXPrpOa6w0YtAw=","message":"Probably it's better for crypto applications than for hashes. It IS good for PRNG applications with infrequent entropy injections.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597243840,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkxOTI0MQ==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672919241"},"nonce":"0/jEApf0lfwJAehhE5kALBJll6I=","message":"64-bit variant can be optimized down to this (taken from `prvrng`), so even faster, without access to hash array:\n\n\tinline void prvrng_prvhash42_64( PRVRNG_CTX* const ctx, const uint64_t msg )\n\t{\n\t// Entry.\n\n\tctx -\u003e Seed ^= msg;\n\n\t// Lower 32 bits of hash.\n\n\tctx -\u003e Seed *= ctx -\u003e lcg;\n\tuint64_t ph = (uint32_t) ctx -\u003e Hash;\n\tctx -\u003e Hash ^= ctx -\u003e Seed \u003e\u003e 32;\n\tctx -\u003e Seed ^= ph ^ msg;\n\n\t// Upper 32 bits of hash.\n\n\tctx -\u003e Seed *= ctx -\u003e lcg;\n\tph = ctx -\u003e Hash \u003e\u003e 32;\n\tctx -\u003e Hash ^= ctx -\u003e Seed \u0026 0xFFFFFFFF00000000ULL;\n\tctx -\u003e Seed ^= ph ^ msg;\n\n\t// Exit.\n\n\tctx -\u003e lcg += ctx -\u003e Seed;\n\t}","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597244071,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkyMTgyNA==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672921824"},"nonce":"Pk/yrC8JNeyrc7zBzqJihIEUhcg=","message":"I'll add \"optimized\" versions in a while. Please call the `prvhash` as prvhash42_64 in you sources, it's important as `prvhash` means arbitrary hash lengths and versions.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597244437,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkyNjM1Mw==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672926353"},"nonce":"jVG7p2Lkqrp3uPpjmim+BafAVDg=","message":"I also think your \"speed test\" is seriously flawed. \"Small key speed test\" is much more representative.","files":null},{"type":3,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1597245433,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjkzNzAxNg==","github-url":"https://github.com/rurban/smhasher/issues/131#issuecomment-672937016"},"nonce":"hbi5jvv646fQiCR2UYvn1WIeXH8=","message":"I've just added `prvhash42opt.h`. Please use functions in this file for speed tests.","files":null}]}