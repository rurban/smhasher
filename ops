{"author":{"id":"dea43e6b916975bf3cff4424f473a805c833f29424f086ee359d4eb329d3da27"},"ops":[{"type":3,"author":{"id":"dea43e6b916975bf3cff4424f473a805c833f29424f086ee359d4eb329d3da27"},"timestamp":1571222570,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0MjY0MTIwMA==","github-url":"https://github.com/rurban/smhasher/issues/73#issuecomment-542641200"},"nonce":"/Vlt/Daism9G18KFz6O3H1cLzvY=","message":"@Sanmayce I can't agree with some of the preconditions you mentioned (e.g. that the performance on mainstream CPUs doesn't matter much or that performance/latency on keys of e.g. 33 or more bytes doesn't matter either), but I fully agree, that SMhasher doesn't show anything else then collision quality (yeah, SMhasher doesn't show anything meaningful regarding speed \u0026 latency).\n\n@Sanmayce please be so kind and take a thorough look at http://fastcompression.blogspot.com/2019/03/presenting-xxh3.html presenting in my opinion the currently best hash algorithm in the world and run the full benchmark suite (available under https://github.com/Cyan4973/xxHash/tree/dev/tests/bench ) as well as the updated SMhasher https://github.com/Cyan4973/smhasher (it's actually already merged in this repo, but just for case there are some newer differences) on all your computers.\n\nThen I'm really interested whether FNV1A_Yorikke (or its variants) is at least 1.1x better than XXH3 for keys larger or equal to 3 bytes (smaller keys don't make much sense - you're better off building a fixed-size data structure like an array).","files":null}]}