{"author":{"id":"778d0d8adcf381faef152a6577de9902e431612075f7585af0b6ac9d7d1c1475"},"ops":[{"type":3,"author":{"id":"778d0d8adcf381faef152a6577de9902e431612075f7585af0b6ac9d7d1c1475"},"timestamp":1586267232,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMDM5NjgyNA==","github-url":"https://github.com/rurban/smhasher/issues/116#issuecomment-610396824"},"nonce":"MA33wJMLHrjmh8HYVIzRzs+e6xU=","message":"yeah, the bulk speed make two ecological positions for both wyhash and xxh3 :-) I say xxh3 is great, but I am focusing on short keys.","files":null},{"type":3,"author":{"id":"778d0d8adcf381faef152a6577de9902e431612075f7585af0b6ac9d7d1c1475"},"timestamp":1586310218,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMDcwNDYyMQ==","github-url":"https://github.com/rurban/smhasher/issues/116#issuecomment-610704621"},"nonce":"1luEtm4q8NaSk6wCB+xYTz1SfN8=","message":"Today, with g++-9, the new record is here.\n\n/usr/share/dict/words\n|hash function  |short hash/us  |bulk_256B GB/s |bulk_64KB GB/s |\n|----           |----           |----           |----           |\n|wyhash         |442.49         |13.16          |9.64           |\n|xxh3_avx2      |146.15         |9.23           |45.34          |\n|xxHash64       |82.07          |10.89          |14.71          |\n|t1ha2_atonce   |116.48         |12.98          |17.63          |\n\nTo make it crediable, I attach the simplest benchmark.cpp here:\n```C++\n#include\t\u003csys/time.h\u003e\n#include\t\u003ciostream\u003e\n#include\t\u003cfstream\u003e\n#include\t\u003cvector\u003e\n#include\t\"xxHash/xxhash.c\"\n#include\t\"t1ha/t1ha.h\"\n#include\t\"wyhash.h\"\nusing\tnamespace\tstd;\nstruct\twy{\tsize_t\toperator()(const\tstring\t\u0026s,\tuint64_t seed)const{\treturn\twyhash(s.c_str(),s.size(),seed,_wyp);\t}};\nstruct\tx3{\tsize_t\toperator()(const\tstring\t\u0026s, uint64_t seed)const{\treturn\tXXH3_64bits_withSeed(s.c_str(),s.size(),seed);\t}};\nstruct\txx{\tsize_t\toperator()(const\tstring\t\u0026s, uint64_t seed)const{\treturn\tXXH64(s.c_str(),s.size(),seed);\t}};\nstruct\tt1{\tsize_t\toperator()(const\tstring\t\u0026s, uint64_t seed)const{\treturn\tt1ha2_atonce(s.c_str(),s.size(),seed);\t}};\n\nvector\u003cstring\u003e\tv;\t\ntemplate \u003cclass Hasher\u003e\nuint64_t\tbench_hash(const\tchar\t*name){\n\tHasher\th;\tstring\ts;\ttimeval\tbeg,\tend;\t\n\tuint64_t\tdummy=0;\tconst\tuint64_t\tN=v.size(),\tR=0x1000;\n\tcerr.precision(2);\tcerr.setf(ios::fixed);\tcerr\u003c\u003c'|'\u003c\u003cname\u003c\u003c(strlen(name)\u003c8?\"\\t\\t|\":\"\\t|\");\n\t\n\tgettimeofday(\u0026beg,NULL);\n\tfor(size_t  r=0;    r\u003cR;    r++)\tfor(size_t\ti=0;\ti\u003cN;\ti++)\tdummy+=h(v[i],r);\n\tgettimeofday(\u0026end,NULL);\n\tcerr\u003c\u003c1e-6*R*N/(end.tv_sec-beg.tv_sec+1e-6*(end.tv_usec-beg.tv_usec))\u003c\u003c\"\\t\\t|\";\n\n\ts.resize(1\u003c\u003c8);\n\tgettimeofday(\u0026beg,NULL);\n\tfor(size_t  r=0;    r\u003c(R\u003c\u003c14);    r++)\tdummy+=h(s,r);\n\tgettimeofday(\u0026end,NULL);\n\tcerr\u003c\u003c1e-9*(R\u003c\u003c14)*s.size()/(end.tv_sec-beg.tv_sec+1e-6*(end.tv_usec-beg.tv_usec))\u003c\u003c\"\\t\\t|\";\n\n\ts.resize(1\u003c\u003c16);\n\tgettimeofday(\u0026beg,NULL);\n\tfor(size_t  r=0;    r\u003c(R\u003c\u003c6);    r++)\tdummy+=h(s,r);\n\tgettimeofday(\u0026end,NULL);\n\tcerr\u003c\u003c1e-9*(R\u003c\u003c6)*s.size()/(end.tv_sec-beg.tv_sec+1e-6*(end.tv_usec-beg.tv_usec))\u003c\u003c\"\\t\\t|\\n\";\n\treturn\tdummy;\n}\n\nint\tmain(void){\n\tstring\tfile=\"/usr/share/dict/words\", s;\n\tifstream\tfi(file.c_str());\n\tfor(fi\u003e\u003es;\t!fi.eof();\tfi\u003e\u003es)\tif(s.size())\tv.push_back(s);\n\tfi.close();\n\t//shuffle the array to benchmark random access\n\tfor(size_t\ti=v.size()-1;\ti;\ti--)\tswap(v[i],v[rand()%(i+1)]);\n\tuint64_t\tr=0;\n\tcerr\u003c\u003cfile\u003c\u003c'\\n';\n\tcerr\u003c\u003c\"|hash function\\t|short hash/us\\t|bulk_256B GB/s\\t|bulk_64KB GB/s\\t|\\n\";\n\tcerr\u003c\u003c\"|----\\t\\t|----\\t\\t|----\\t\\t|----\\t\\t|\\n\";\n\tr+=bench_hash\u003cwy\u003e(\"wyhash\");\n\tr+=bench_hash\u003cx3\u003e(\"xxh3_avx2\");\n\tr+=bench_hash\u003cxx\u003e(\"xxHash64\");\n\tr+=bench_hash\u003ct1\u003e(\"t1ha2_atonce\");\n\treturn\tr;\n}\n```","files":null}]}