{"author":{"id":"858a49e4dd6ce99467ce4ab87a028ebdcb8a0c31101a72fe47695510d4becb6f"},"ops":[{"type":3,"author":{"id":"858a49e4dd6ce99467ce4ab87a028ebdcb8a0c31101a72fe47695510d4becb6f"},"timestamp":1599225947,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4NzE0MzkwMQ==","github-url":"https://github.com/rurban/smhasher/issues/51#issuecomment-687143901"},"nonce":"ByIBJKMTIZUefonfzBQc+nURUXs=","message":"@ChrisJefferson You are right. That seems like a very reasonable requirement in your situation.\n\nJust in case you are interested, allow me to entertain the following hash function:\nFor some large prime `p` and a random number `a \u003c p`, let `h(x) = a^x mod p`. Then you are guaranteed that two sums colide `h(x_1)+h(x_2)+... = h(y_1)+h(y_2)+...` with at most probability `2^b/p`, where `b` is the number of bits in your keys. Basically because a degree `d` polynomial only has `d` roots.\n\nHere `a^x (mod p)` (modular exponentiation, not xor) can be computed in time `O(x)`.\nI don't know if that's fast enough for your use-case. Just wanted to mention it in case you care more about being safe than having a very fast hash function.","files":null},{"type":6,"author":{"id":"858a49e4dd6ce99467ce4ab87a028ebdcb8a0c31101a72fe47695510d4becb6f"},"timestamp":1601305645,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6NDAyOTUzMjcy"},"nonce":"RkawXoe3ONnAAyaWvVp28Rfw5E8=","target":"400e22bd9748577d561118c15b902412dc88fd259aefc1a95706a45b0878eda4","message":"@ChrisJefferson You are right. That seems like a very reasonable requirement in your situation.\n\nJust in case you are interested, allow me to entertain the following hash function:\nFor some large prime `p` and a random number `a \u003c p`, let `h(x) = a^x mod p`. Then you are guaranteed that two sums colide `h(x_1)+h(x_2)+... = h(y_1)+h(y_2)+...` with at most probability `2^b/p`, where `b` is the number of bits in your keys. Basically because a degree `d` polynomial only has `d` roots.\n\nHere `a^x (mod p)` (modular exponentiation, not xor) can be computed in time `O(log x)`.\nI don't know if that's fast enough for your use-case. Just wanted to mention it in case you care more about being safe than having a very fast hash function.","files":null}]}