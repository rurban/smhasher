{"author":{"id":"dea43e6b916975bf3cff4424f473a805c833f29424f086ee359d4eb329d3da27"},"ops":[{"type":3,"author":{"id":"dea43e6b916975bf3cff4424f473a805c833f29424f086ee359d4eb329d3da27"},"timestamp":1586267030,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxMDM5NDk3NQ==","github-url":"https://github.com/rurban/smhasher/issues/116#issuecomment-610394975"},"nonce":"QegajQvu1m5TPVt0rpdD20NTOZ8=","message":"\u003ein fact this version's bulk speed is not great, which is trade for short key speed and code sizes. It depends on tasks.\n\nOf course. The point was, that the older wyhash versions were just a tiny bit slower for shorter keys than the wyhash gamma, but way faster in bulk speed than the current wyhash gamma.\n\nCode size might be sometimes important, but for a general purpose hash function I don't think it matters in practice at all. Either there is a hash function in 20 characters one can easily remember for writing tiny/embedded/throwaway apps or there is no limit - and I think wyhash definitely targets the latter :wink:.\n\n\u003eIf you hack xxHash's benchmark code: benchfn.c, forcing it directly call wyhash or other hash, you will see something amazing.\n\nYeah, that's true. It really is amazing. Still in my eyes it doesn't solve the current weakest point of wyhash gamma which is bulk speed being ~2.3x lower than the xxh3 and nearly that much lower than certain older wyhash versions. It actually amplifies this weakness :cry:.","files":null}]}