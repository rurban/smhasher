{"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"ops":[{"type":6,"author":{"id":"656dd67b0f9bdf8bc451c83ff8f36ef959de2c8b4781d218d9958f9e71ef0639"},"timestamp":1600065857,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MjgyODQ5Nzc="},"nonce":"kIGwJAhlQISuilgyhJMqdnP1/3E=","target":"ef974e3b0be5afd5bf24d940b61e315a5a877b7c6c57b646b5194b8fd052e57e","message":"This test evaluates hash function's use as a checksum, how well it can detect 1-bit alterations in a rather big message. This test is probably similar to Diff test, but considers a much longer message.\n```\nsize_t BufSize = 1\u003c\u003c17;\nuint8_t* Buf = (uint8_t*) malloc( BufSize );\n... fill Buf with random values\n\nfor( size_t i = 0; i \u003c BufSize * 8; i++ )\n{\nconst size_t BytePos = i \u003e\u003e 3;\nconst size_t BitPos = i \u0026 7;\nBuf[ BytePos ] ^= (uint8_t) ( 1 \u003c\u003c BitPos );\n\n... calculate hash (Buf, BufSize ).\n\nBuf[ BytePos ] ^= (uint8_t) ( 1 \u003c\u003c BitPos );\n}\n```","files":null}]}