{"author":{"id":"9556b3528bb71e828da55722f4a91f25e84fafcbbdb4e86feb42a2d9eac4693e"},"ops":[{"type":3,"author":{"id":"9556b3528bb71e828da55722f4a91f25e84fafcbbdb4e86feb42a2d9eac4693e"},"timestamp":1588938218,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyNTc3NjMyNA==","github-url":"https://github.com/rurban/smhasher/issues/125#issuecomment-625776324"},"nonce":"pdEp53jh0HFkj70wSeTsxWWuOtc=","message":"As I wrote earlier, seems that the best code for measuring up to clock cycles [inside the t1ha benchmark](https://github.com/erthink/t1ha/blob/master/tests/mera.c).\n\nIt supports x86, arm64, ppc64, s390x, e2k, ia64, etc, as well as `perf_event`, `emscripten_get_now()`, `mach_absolute_time()`, `QueryPerformanceCounter()`, `read_wall_time()`, `clock_gettime()`, `gethrtime()` and `gettimeofday()` (i.e. more than google-benchmark).\nFor instance see [logs](https://travis-ci.org/github/erthink/t1ha/builds/682728316) on Travis-CI.\n\nI was planning to rearrange this code as a separate \"mera\" library, but I don't have time for this yet.\nTherefore, reusing this code is not as convenient as we would like.\nHowever, it is worth mentioning in this context.","files":null},{"type":6,"author":{"id":"9556b3528bb71e828da55722f4a91f25e84fafcbbdb4e86feb42a2d9eac4693e"},"timestamp":1588938619,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcwNzUxMjkx"},"nonce":"tZD2W5frylMIVylGEA2gb17hoUY=","target":"692f88d29fae8516c6f7ec93335cd3b40cdef5803b699f44b923e96b8ff75334","message":"As I wrote earlier, seems that the best code for measuring up to clock cycles [inside the t1ha benchmark](https://github.com/erthink/t1ha/blob/master/tests/mera.c).\n\nIt supports x86, arm64, ppc64, s390x, e2k, ia64, etc, as well as `perf_event`, `emscripten_get_now()`, `mach_absolute_time()`, `QueryPerformanceCounter()`, `read_wall_time()`, `clock_gettime()`, `gethrtime()` and `gettimeofday()` (i.e. more than google-benchmark).\nFor instance see [logs](https://travis-ci.org/github/erthink/t1ha/builds/682728316) on Travis-CI.\n\nI was planning to rearrange this code as a separate \"mera\" library, but I don't have time for this yet.\nTherefore, reusing this code is not as convenient as we would like.\nHowever, it is worth mentioning in this context.\n\n----\n\nPPC64:\n```\nPreparing to benchmarking...\n - running on CPU#10\n - use MFSPR(268) as clock source for benchmarking\n - assume it cheap and stable\n - measure granularity and overhead: 6 cycles, 0.166667 iteration/cycle\n```\n\nARM64:\n```\nPreparing to benchmarking...\n - running on CPU#30\n - use CNTVCT_EL0 as clock source for benchmarking\n - assume it cheap and stable\n - measure granularity and overhead: 0.2 tick, 5 iterations/tick\n```\n\nx390s\n```\nPreparing to benchmarking...\n - running on CPU#3\n - use STCKE as clock source for benchmarking\n - assume it cheap and stable\n - measure granularity and overhead: 6 cycles, 0.166667 iteration/cycle\n```\n\nAMD64:\n```\nPreparing to benchmarking...\n - perf_event_open(): No such file or directory\n - running on CPU#0\n - use RDTSCP as clock source for benchmarking\n - assume it cheap and floating (RESULTS MAY VARY AND BE USELESS)\n - measure granularity and overhead: 38 cycles, 0.0263158 iteration/cycle\n```","files":null}]}