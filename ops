{"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"ops":[{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617096367,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTU1OTYyNzI="},"nonce":"gscBr2SysRqCLKumLRj8puXCV90=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes =\u003e 0\n* FNVA variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* ...","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617096514,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTU1OTc4NzM="},"nonce":"YBK2hBxE0TESNfz2GuJCyeKSsxw=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes =\u003e 0\n* FNVA variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* ...","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617096522,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTU1OTc5NzQ="},"nonce":"VzDDR91Siu2EHBPw26J7m6KU/pk=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes =\u003e 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* ...","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617096565,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTU1OTg0NDI="},"nonce":"p261scbjF8E/4lXIy5hgijZceJY=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes =\u003e 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* ...","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617096688,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTU1OTk2ODg="},"nonce":"LJQ2wmdnnrQJi4WgRJd9zo+iq04=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes == 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* ...","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617357611,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTc1MDcwNjU="},"nonce":"H1ye8moVffa0Hn/p9Yam0dggs4w=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes == 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* fasthash: the seed can be trivially exposed by using len=0 keys, the seed is then the reverse of the simple mix function.","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617357656,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTc1MDczMDI="},"nonce":"YYu8oIyTNNPQl5LVlh5EgBruHf0=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes == 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* fasthash: expose the seed by using len=0 keys, the seed is then the reverse of the simple mix function.","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617359619,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTc1MTgxODM="},"nonce":"4c4A10VFgTfnEXZ4gojVoZac5ys=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes == 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* fasthash: expose the seed by using len=0 keys, the seed is then the reverse of the simple mix function.\n\n* md5 https://eprint.iacr.org/2013/170.pdf","files":null},{"type":6,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1617359700,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo1MTc1MTg1ODA="},"nonce":"Bgk4ocf49uVqGLXkSS2dY9QwmUo=","target":"98fb182f6236dd22cda17ed9861a710d643f5139cb7a8eb8c9604e4300985311","message":"So far we didn't list the known exploit schemes. But since I started evaluating and listing Bad Seeds #99, we could as well list all known exploits, e.g. BadKeys which will always lead to collisions.\n\n* o1hash: \n  with binary keys: if key len\u003e=4 and key[len/2 -2]..[len/2 +2] (_the middle_) being 0. \n  eg { '\\0\\0\\0\\0', 'x\\0\\0\\0\\0x' }\n  with text keys: if len \u003e=4 and the first 4 bytes + the last 4 bytes == 0\n* FNV1 variants with binary keys, just add \\0's\n* HalfSiphash: ...\n* City all 144-byte strings with 3 bits set https://github.com/google/cityhash/issues/4\n* Murmur http://emboss.github.io/blog/2012/12/14/breaking-murmur-hash-flooding-dos-reloaded/\n* JenkinsOAAT: with binary keys, just add \\0's\n* fasthash: expose the seed by using len=0 keys, the seed is then the reverse of the simple mix function.\n\n* md5 https://eprint.iacr.org/2013/170.pdf\n* sha1 https://marc-stevens.nl/research/papers/PhD%20Thesis%20Marc%20Stevens%20-%20Attacks%20on%20Hash%20Functions%20and%20Applications.pdf","files":null},{"type":3,"author":{"id":"ea8195bf30d85b36cadb8f08e79aa22a50e04d9a05d6d973c74da1c9f099555e"},"timestamp":1627067643,"metadata":{"github-id":"IC_kwDOARWYbc40zPF1","github-url":"https://github.com/rurban/smhasher/issues/186#issuecomment-885846389"},"nonce":"FwhFgSSubuAIuetfy8bMqluvpPc=","message":"* meow hash https://peter.website/meow-hash-cryptanalysis","files":null}]}